;; [[http://jblevins.org/projects/markdown-mode/]]

(use-package markdown-mode
  :mode ("\\.md\\'" "\\.markdown\\'" "README\\.md\\'")

  :init
  (when (executable-find "pandoc")
    (setq markdown-command "pandoc -t html5 --mathjax --highlight-style pygments --standalone"))

  :config

  ;; ----------------------------------------------------------------------
  ;; export

  (defun prf/markdown-export-no-save (&optional output-file)
    "Run Markdown on the current buffer, save to file, and return the filename.
If OUTPUT-FILE is given, use that as the filename.  Otherwise, use the filename
generated by `markdown-export-file-name', which will be constructed using the
current filename, but with the extension removed and replaced with .html."
    (interactive)
    (unless output-file
      (setq output-file (markdown-export-file-name ".html")))
    (when output-file
      (let* ((init-buf (current-buffer))
	     (init-point (point))
	     (init-buf-string (buffer-string))
	     (output-buffer (find-file-noselect output-file))
	     (output-buffer-name (buffer-name output-buffer)))
	(run-hooks 'markdown-before-export-hook)
	(markdown-standalone output-buffer-name)
	(with-current-buffer output-buffer
	  (run-hooks 'markdown-after-export-hook)
	  (save-buffer)
	  (when markdown-export-kill-buffer (kill-buffer)))
	output-file)))

  (defun prf/markdown/export-files-html-merge (files dest-file &optional file-name-as-header macro-header-file)
    (with-temp-buffer
      (when macro-header-file
	(insert-file-contents macro-header-file)
	(end-of-buffer)
	(insert "\n\n"))

      (mapc
       (lambda (x)
	 (let ((filename-x (file-name-nondirectory x))
	       (basename-x (file-name-base x)))

	   (when file-name-as-header
	     (insert (concat "# " basename-x))
	     (end-of-buffer))

	   (insert-file-contents x)

	   (when file-name-as-header
	     (while (re-search-forward "^#" nil t)
	       (replace-match "##")))

	   (end-of-buffer)))
       files)

      (prf/markdown-export-no-save dest-file)))

  (defun prf/markdown/export-files-html (files dest-folder &optional file-name-as-header macro-header-file)
    (mapc
     (lambda (x)
       (let ((filename-x (file-name-nondirectory x))
	     (basename-x (file-name-base x)))
	 (with-temp-buffer

	   (when macro-header-file
	     (insert-file-contents macro-header-file)
	     (end-of-buffer)
	     (insert "\n\n"))

	   (when file-name-as-header
	     (insert (concat "# " basename-x))
	     (end-of-buffer))

	   (insert-file-contents x)

	   (when file-name-as-header
	     (while (re-search-forward "^#" nil t)
	       (replace-match "##")))

	   (prf/markdown-export-no-save (concat dest-folder
						"/"
						(concat basename-x ".html"))))))
     files))

  (defun prf/markdown/export-folder-html (src-folder dest-folder &optional file-name-as-header macro-header-file)
    (prf/markdown/export-files-html (directory-files src-folder t "\.md$") dest-folder
				    file-name-as-header macro-header-file))

  ;; ----------------------------------------------------------------------
  ;; face-lock

  ;; closer look to org-mode
  (face-spec-set
   'markdown-table-face
   '((t :inherit org-table))
   'face-defface-spec)
  (face-spec-set
   'markdown-header-face-1
   '((t :inherit outline-1))
   'face-defface-spec)
  (face-spec-set
   'markdown-header-face-2
   '((t :inherit outline-2))
   'face-defface-spec)
  (face-spec-set
   'markdown-header-face-3
   '((t :inherit outline-3))
   'face-defface-spec)
  (face-spec-set
   'markdown-header-face-4
   '((t :inherit outline-4))
   'face-defface-spec)
  (face-spec-set
   'markdown-header-face-5
   '((t :inherit outline-5))
   'face-defface-spec)

  ;; https://nicolas.petton.fr/ressources/presentation-stripped6.html
  (font-lock-add-keywords
   'markdown-mode
   '(("\\(<mark>\\)\\([^<]+?\\)\\(</mark>\\)" (2 highlight)))))

(provide 'init-markdown)
